%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/fcbc25191f449f3791db0f2e8acf2d670ea138a0/exercises/perfect-numbers/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(perfect_numbers_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_smallest_perfect_number_is_classified_correctly_test_'() ->
    {"Smallest perfect number is classified "
     "correctly",
     ?_assertEqual(perfect, perfect_numbers:classify(6))}.

'2_medium_perfect_number_is_classified_correctly_test_'() ->
    {"Medium perfect number is classified "
     "correctly",
     ?_assertEqual(perfect, perfect_numbers:classify(28))}.

'3_large_perfect_number_is_classified_correctly_test_'() ->
    {"Large perfect number is classified correctly",
     ?_assertEqual(perfect,
		   perfect_numbers:classify(33550336))}.

'4_smallest_abundant_number_is_classified_correctly_test_'() ->
    {"Smallest abundant number is classified "
     "correctly",
     ?_assertEqual(abundant, perfect_numbers:classify(12))}.

'5_medium_abundant_number_is_classified_correctly_test_'() ->
    {"Medium abundant number is classified "
     "correctly",
     ?_assertEqual(abundant, perfect_numbers:classify(30))}.

'6_large_abundant_number_is_classified_correctly_test_'() ->
    {"Large abundant number is classified "
     "correctly",
     ?_assertEqual(abundant,
		   perfect_numbers:classify(33550335))}.

'7_smallest_prime_deficient_number_is_classified_correctly_test_'() ->
    {"Smallest prime deficient number is classified "
     "correctly",
     ?_assertEqual(deficient, perfect_numbers:classify(2))}.

'8_smallest_non_prime_deficient_number_is_classified_correctly_test_'() ->
    {"Smallest non-prime deficient number "
     "is classified correctly",
     ?_assertEqual(deficient, perfect_numbers:classify(4))}.

'9_medium_deficient_number_is_classified_correctly_test_'() ->
    {"Medium deficient number is classified "
     "correctly",
     ?_assertEqual(deficient, perfect_numbers:classify(32))}.

'10_large_deficient_number_is_classified_correctly_test_'() ->
    {"Large deficient number is classified "
     "correctly",
     ?_assertEqual(deficient,
		   perfect_numbers:classify(33550337))}.

'11_edge_case_no_factors_other_than_itself_is_classified_correctly_test_'() ->
    {"Edge case (no factors other than itself) "
     "is classified correctly",
     ?_assertEqual(deficient, perfect_numbers:classify(1))}.

'12_zero_is_rejected_as_it_is_not_a_positive_integer_test_'() ->
    {"Zero is rejected (as it is not a positive "
     "integer)",
     ?_assertError(_, perfect_numbers:classify(0))}.

'13_negative_integer_is_rejected_as_it_is_not_a_positive_integer_test_'() ->
    {"Negative integer is rejected (as it "
     "is not a positive integer)",
     ?_assertError(_, perfect_numbers:classify(-1))}.
