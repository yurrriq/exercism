#+SETUPFILE:   ../../org/setup.org
#+TITLE:       Exercism.io → Haskell → Accumulate
#+DATE:
#+DESCRIPTION: My solutions to Excercism.io in Haskell.
#+OPTIONS: html-postamble:nil toc:nil
#+HTML_MATHJAX: align:"left" scale:"100" mathml:t path:"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
#+LINK_HOME: ../../index.html
#+LINK_UP:   ../index.html
#+INFOJS_OPT: path:../../js/org-info.js view:showall toc:nil ltoc:nil tdepth:2 mouse:#dddddd

* Accumulate
Implement the `accumulate` operation, which, given a collection and an operation to perform on each element of the collection, returns a new collection containing the result of applying that operation to each element of the input collection.

For example, given the collection of numbers:

- 1, 2, 3, 4, 5

And the operation:

- square a number

Your code should be able to produce the collection of squares:

- 1, 4, 9, 16, 25

** Restrictions
Keep your hands off that collect/map/fmap/whatchamacallit functionality
provided by your standard library!
Solve this one yourself using other basic tools instead.

Elixir specific: it's perfectly fine to use ~Enum.reduce~ or
~Enumerable.reduce~.

Check out [[http://help.exercism.io/getting-started-with-haskell.html][Exercism Help]] for instructions to get started writing Haskell.

** Source
Conversation with James Edward Gray II [[https://twitter.com/jeg2][view source]]

** Solution
#+BEGIN_SRC haskell :tangle Accumulate.hs :padline no
module Accumulate where
#+END_SRC

\[
  \text{accumulate}\ f\ \text{coll} = \left\{\ f(x)\ \vert\ x \in \text{coll}\ \right\}
\]

#+BEGIN_SRC haskell :tangle Accumulate.hs
accumulate :: (a -> b) -> [a] -> [b]
accumulate f coll = [(f x) | x <- coll]
#+END_SRC

Once again, Haskell syntax almost mirrors mathematical notation. 👍

** Tests
#+BEGIN_SRC fish
runhaskell -Wall accumulate_test.hs
#+END_SRC
#+BEGIN_EXAMPLE
Cases: 6  Tried: 6  Errors: 0  Failures: 0
#+END_EXAMPLE
