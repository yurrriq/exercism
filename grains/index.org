#+SETUPFILE:   ../../org/setup.org
#+TITLE:       Exercism.io → Haskell → Grains
#+DATE:
#+DESCRIPTION: My solutions to Excercism.io in Haskell.
#+OPTIONS: html-postamble:nil toc:nil
#+HTML_MATHJAX: align:"left" scale:"100" mathml:t path:"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
#+LINK_HOME: ../../index.html
#+LINK_UP:   ../index.html
#+INFOJS_OPT: path:../../js/org-info.js view:showall toc:nil ltoc:nil tdepth:2 mouse:#dddddd

* Grains
Write a program that calculates the number of grains of wheat on a chessboard given that the number on each square doubles.

There once was a wise servant who saved the life of a prince. The king
promised to pay whatever the servant could dream up. Knowing that the
king loved chess, the servant told the king he would like to have grains
of wheat. One grain on the first square of a chess board. Two grains on
the next. Four on the third, and so on.

There are 64 squares on a chessboard.

Write a program that shows:
- how many grains were on each square, and
- the total number of grains

** Source
JavaRanch Cattle Drive, exercise 6 [[http://www.javaranch.com/grains.jsp][view source]]

** Solution
#+BEGIN_SRC haskell :tangle Grains.hs :padline no :exports none
{-|
Module      : Grains
Copyright   : (c) Eric Bailey, 2015
License     : MIT

Maintainer  : Eric Bailey
Stability   : experimental
Portability : portable

Calculating the number of grains of wheat on a chessboard,
given that the number on each square doubles.
-}

module Grains (
  square,
  total
  -- ** Recursive Alternatives
  -- $recursive
  ) where

{-|
Given the number of a square on a chess board, where one grain is placed on
the first square and the number of grains on each subsequent square doubles,
returns the number of grains of wheat on a given square.
-}
#+END_SRC

#+BEGIN_SRC haskell :tangle Grains.hs :padline no
square :: Integer -> Integer
square = (2 ^) . subtract 1
#+END_SRC

#+BEGIN_SRC haskell :tangle Grains.hs :exports none
-- | Returns the total number of grains on the entire chessboard.
#+END_SRC

#+BEGIN_SRC haskell :tangle Grains.hs :padline no
total :: Integer
total = sum (map square [1..64])
#+END_SRC

*** Recursive Alternatives
#+BEGIN_SRC haskell
square' :: Integer -> Integer
square' 1 = 1
square' x = 2 * square' (x - 1)

total' :: Integer
total' = sum (map square' [1..64])
#+END_SRC

#+BEGIN_SRC haskell :tangle Grains.hs :exports none
{- $recursive
@
square' :: Integer -> Integer
square' 1 = 1
square' x = 2 * square' (x - 1)
@
@
total' :: Integer
total'    = sum (map square' [1..64])
@
-}
#+END_SRC

** Tests
#+BEGIN_SRC fish
runhaskell grains_test.hs
#+END_SRC
#+BEGIN_EXAMPLE
Cases: 5  Tried: 5  Errors: 0  Failures: 0
#+END_EXAMPLE
