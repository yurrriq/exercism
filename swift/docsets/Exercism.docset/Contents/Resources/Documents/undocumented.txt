RobotNameTest.swift
	class RobotNameTest: XCTestCase
	func robotNameIsCorrectlyFormatted(name: String) -> Bool
	func testHasName()
	func testNameSticks()
	func testDifferentRobotsHaveDifferentNames()
	func testResetName()
Year.swift
	class Year
	var year: Int
	init(calendarYear: Int)
	var isLeapYear: Bool
HammingTest.swift
	class HammingTests: XCTestCase
	func testNoDifferenceBetweenEmptyStrands()
	func testNoDifferenceBetweenIdenticalStrands()
	func testCompleteHammingDistanceInSmallStrand()
	func testSmallHammingDistanceInMiddleSomewhere()
	func testLargerDistance()
	func testReturnsNilWhenOtherStrandLonger()
	func testReturnsNilWhenOriginalStrandLonger()
LeapTest.swift
	class LeapTest: XCTestCase
	func testVanillaLeapYear()
	func testAnyOldYear()
	func testCentury()
	func testExceptionalCentury()
DNA.swift
	public struct DNA
	public let strand: Strand
	public init?(strand: Strand)
	public func count(nucleotide: Character) -> Int
	public func counts() -> [String: Count]
	var nucleotides: CharacterView
	var isValidNucleotide: Bool
WordCountTest.swift
	class WordCountTest: XCTestCase
	func testCountOneWord()
	func testCountOneOfEeach()
	func testCountMultipleOccurrences()
	func testIgnorePunctation()
	func testIncludeNumbers()
	func testNormalizeCase()
BobTest.swift
	class BobTests: XCTestCase
	func testStatingSomething()
	func testShouting()
	func testAskingAQustion()
	func testTalkingForcefully()
	func testUsingAcronyms()
	func testForcefulQuestions()
	func testShoutingNumbers()
	func testOnlyNumbers()
	func testQuestionWithOnlyNumbers()
	func testShoutingWithSpecialCharacters()
	func testShoutingWithUmlautsCharacters()
	func testCalmlySpeakingAboutUmlauts()
	func testShoutingWithNoExclamationmark()
	func testStatementContainingQuestionsMark()
	func testPrattlingOn()
	func testSilence()
	func testProlongedSilence()
Hamming.swift
	class Hamming
	class func compute(input: String, against: String) -> Int?
Bob.swift
	class Bob
	class func hey(input: String) -> String
ETLTest.swift
	class ETLTest: XCTestCase
	func testTransformOneValue()
	func testTransformMoreValues()
	func testMoreKeys()
	func testFullDataSet()
WordCount.swift
	public struct WordCount
	let words: String
	init(words: String)
	public func count() -> [Word: Count]
AnagramTest.swift
	class AnagramTest: XCTestCase
	func testNoMatches()
	func testDetectSimpleAnagram()
	func testDetectMultipleAnagrams()
	func testDoesNotConfuseDifferentDuplicates()
	func testIdenticalWordIsNotAnagram()
	func testEliminateAnagramsWithSameChecksum()
	func testEliminateAnagramSubsets()
	func testDetectAnagram()
	func testMultipleAnagrams()
	func testAnagramsAreCaseInsensitive()
GradeSchoolTest.swift
	class GradeSchoolTest: XCTestCase
	func testAnEmptySchool()
	func testAddStudent()
	func testAddMoreStudentsInSameClass()
	func testAddStudentsToDifferentGrades()
	func testGetStudentsInAGrade()
	func testGetStudentsInANonExistantGrade()
	func testSortSchool()
	func sameStudents<C: CollectionType where C.Generator.Element == String>
    (result: C?, _ expected: [String]?) -> Bool
	mutating func addStudents<S: SequenceType where S.Generator.Element == (String, Int)>
    (sequence: S)
PhoneNumberTest.swift
	class PhoneNumberTest: XCTestCase
	func testValidWithTenDigits()
	func testCleansNumber()
	func testCleansNumberWithDots()
	func testValidWithElevenDigitsAndFirstIsOne()
	func testInvalidWhenElevenDigits()
	func testInvalidWhenNineDigits()
	func testAreaCode()
	func testPrettyPrint()
	func testPrettyPrintWithFullUSPhoneNumber()
NucleotideCountTest.swift
	class NucleotideCountTests: XCTestCase
	func testEmptyDNAStringHasNoAdenosine()
	func testEmptyDNAStringHasNoNucleotides()
	func testRepetitiveCytidineGetsCounted()
	func testRepetitiveSequenceHasOnlyGuanosine()
	func testCountsByThymidine()
	func testCountsANucleotideOnlyOnce()
	func testValidatesDNA()
	func testCountsAllNucleotides()
PhoneNumber.swift
	var tail: String
GradeSchool.swift
	public func studentsInGrade(grade: Grade) -> Set<Student>
